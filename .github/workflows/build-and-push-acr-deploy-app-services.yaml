name: Build and Push to ACR then Deploy to App Services

on:
  workflow_dispatch:

env:
  REPOSITORY_NAME: lvlup-sw/clutchapi
  REPOSITORY_TAG: aspire-dev  

permissions:
  id-token: write
  contents: read
jobs:
  docker_build_push_acr:
    name: 'Docker Build and Push to ACR'
    runs-on: ubuntu-latest
    environment: development
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
 
    - name: 'Login via Azure CLI'
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Docker Login'
      uses: azure/docker-login@v2
      with:
        login-server: ${{ vars.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_CLIENTID }}
        password: ${{ secrets.REGISTRY_CLIENTSECRET }}

    - name: Build & Push Container
      run: |
        echo "Build image and push to ${{ vars.REGISTRY_LOGIN_SERVER }}"
        cd src/

        echo "Building the container..."
        docker build -t ${{ env.REPOSITORY_NAME }}:${{ env.REPOSITORY_TAG }} .
        echo

        echo "Tagging for ACR..."
        docker tag ${{ env.REPOSITORY_NAME }}:${{ env.REPOSITORY_TAG }} ${{ vars.REGISTRY_LOGIN_SERVER }}/${{ env.REPOSITORY_NAME }}:${{ env.REPOSITORY_TAG }}
        echo

        echo "Pushing image to ACR..."
        docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/${{ env.REPOSITORY_NAME }}:${{ env.REPOSITORY_TAG }}
        echo

    - uses: azure/webapps-deploy@v3
      with:
        app-name: 'clutch-api'
        images: '${{ vars.REGISTRY_LOGIN_SERVER }}/${{ env.REPOSITORY_NAME }}:${{ env.REPOSITORY_TAG }}'