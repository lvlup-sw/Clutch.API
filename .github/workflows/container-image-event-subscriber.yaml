# This action will listen to events emitted by the API
# For now, to build images we will pull from DockerHub

name: Image Events

on:
  workflow_dispatch: # Use this trigger instead of repository_dispatch

jobs:
  handle_event:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Receive Message from Azure Service Bus
        uses: azure/servicebus-actions@v1 # Use this action for Azure Service Bus integration
        with:
          connection_string: ${{ secrets.AZURE_SERVICE_BUS_CONNECTION_STRING }} 
          queue_or_topic_name: ${{ secrets.AZURE_SERVICE_BUS_TOPIC_NAME }} # Or queue name
          # Set properties based on your message structure
          # For example:
          # value_filter: '$.EventName == "ImageBuildRequested"'
          
      - name: Extract Event Data
        id: extract_event
        run: |
          # Extract the data from the message body received from Service Bus
          echo "repositoryName=${{ fromJson(steps.receive_message.outputs.message).EventData.repositoryName }}" >> $GITHUB_OUTPUT
          echo "tag=${{ fromJson(steps.receive_message.outputs.message).EventData.tag }}" >> $GITHUB_OUTPUT
          echo "registryType=${{ fromJson(steps.receive_message.outputs.message).EventData.registryType }}" >> $GITHUB_OUTPUT

      # ... (Your build and delete steps remain the same)
