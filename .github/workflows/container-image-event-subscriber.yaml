# This action will listen to events emitted by the API
# For now, to build images we will pull from DockerHub
# https://github.com/marketplace?query=Azure

# Control Flow:
# 1. Receive event from ASB
# 2. Extract image data from event
# 3. Check to see if image is in ACR already
# 4. If not, pull down from Docker Hub and build
# 5. Upload image to ACR

name: Image Event Listener

on: # Trigger via Logic App
  repository_dispatch:

env:
  REGISTRY_NAME: ContainerImageRegistryDev  

permissions:
  id-token: write
  contents: read
jobs:
  handle_event:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          npm install @azure/service-bus
          npm install @actions/core
          npm install pg

      # Custom action which emits
      # parsed event as an output
      - name: Receive Message from Azure Service Bus
        id: receive_message
        uses: ./.github/actions/receive-event-from-asb
        with:
          connectionString: ${{ secrets.AZURE_SERVICE_BUS_CONNECTION_STRING }}
          queueName: ${{ vars.AZURE_SERVICE_BUS_QUEUE_NAME }}

      - name: Extract Event Data
        id: extract_event
        run: |
          echo "eventName=$(echo '${{ steps.receive_message.outputs.eventName }}' | jq -r '.EventName')" >> $GITHUB_OUTPUT     
          echo "repositoryId=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.RepositoryId')" >> $GITHUB_OUTPUT
          echo "tag=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.Tag')" >> $GITHUB_OUTPUT
          echo "baseImageName=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.Repository')" >> $GITHUB_OUTPUT
          echo "registryType=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.RegistryType')" >> $GITHUB_OUTPUT
          echo "buildDate=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.BuildDate')" >> $GITHUB_OUTPUT
          echo "version=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.EventData.Version')" >> $GITHUB_OUTPUT

      - name: Set Requested Operation Based on Event
        id: get_operation
        run: |
          event_name="${{ steps.extract_event.outputs.eventName }}"

          if [ "$event_name" == "BuildRequested" ]; then
            echo "Build Requested"
            operation="update"
            echo "operation=$operation" >> $GITHUB_OUTPUT 
          elif [ "$event_name" == "DeleteRequested" ]; then
            echo "Delete Requested"
            operation="delete"
            echo "operation=$operation" >> $GITHUB_OUTPUT
          else
            echo "::error::Invalid eventName: $event_name"  # Use the correct variable name
            exit 1
          fi

          echo "Operation set to: $operation" 

      #- name: Check if Image Exists in ACR
      #  id: check_image
      #  run: |
      #    exists=$(az acr repository show-manifests \
      #      --name ${{ env.REGISTRY_NAME }}
      #      --repository ${{ steps.extract_event.outputs.baseImageName }} \
      #      --query "[?tags[0]=='${{ steps.extract_event.outputs.tag }}'].digest" \
      #      --output tsv)
      #
      #    if [ -z "$exists" ]; then
      #      echo "imageExists=false" >> $GITHUB_OUTPUT
      #    else
      #      echo "imageExists=true" >> $GITHUB_OUTPUT
      #    fi

      - name: Build and Push Image
        if: ${{ steps.get_operation.outputs.operation == 'update' }}
        run: |
          docker pull ${{ steps.extract_event.outputs.repositoryId }}
          docker tag ${{ steps.extract_event.outputs.repositoryId }} ${{ vars.REGISTRY_LOGIN_SERVER }}/${{ steps.extract_event.outputs.repositoryId }}

      - name: Login to ACR
        if: ${{ steps.get_operation.outputs.operation == 'update' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Tag and Push to ACR
        if: ${{ steps.get_operation.outputs.operation == 'update'}}
        run: |
          docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/${{ steps.extract_event.outputs.repositoryId }}            

      - name: Azure login
        if: ${{ steps.get_operation.outputs.operation == 'delete' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Validate this operation
      - name: Delete Image
        if: ${{ steps.get_operation.outputs.operation == 'delete' }}
        run:  |
          digest=$(az acr repository show-manifests \
            --name ${{ env.REGISTRY_NAME }} \ 
            --repository ${{ steps.extract_event.outputs.baseImageName }} \
            --query "[?tags[0]=='${{ steps.extract_event.outputs.tag }}'].digest" \
            --output tsv)

          if [ -n "$digest" ]; then 
            az acr repository delete-manifest \
              --name ${{ env.REGISTRY_NAME }} \
              --repository ${{ steps.extract_event.outputs.baseImageName }} \
              --manifest $digest 
          else
            echo "::warning::Image with tag ${{ steps.extract_event.outputs.tag }} not found in ${{ steps.extract_event.outputs.repositoryId }}."
          fi

      - name: Send POST Request to Update Database
        uses: actions/http-client@v3
        with:
          url: ${{ secrets.UPDATE_DATABASE_WEBHOOK }}
          method: POST
          headers:
            Content-Type: application/json
          body: |
            {
              "Operation": ${{ steps.get_operation.outputs.operation }},
              "RepositoryId": ${{ steps.extract_event.outputs.repositoryId }},
              "Repository": ${{ steps.extract_event.outputs.repository }},
              "Tag": ${{ steps.extract_event.outputs.Tag }}
              "BuildDate": ${{ steps.extract_event.outputs.BuildDate }},
              "RegistryType": ${{ steps.extract_event.outputs.RegistryType }}
              "Status": 0
              "Version": ${{ steps.extract_event.outputs.Version }}
            }