# This action will listen to events emitted by the API
# For now, to build images we will pull from DockerHub
# https://github.com/marketplace?query=Azure

# Control Flow:
# 1. Receive event from ASB
# 2. Extract image data from event
# 3. Check to see if image is in ACR already
# 4. If not, pull down from Docker Hub and build
# 5. Upload image to ACR

name: Image Events

# Trigger on Webhook
on:
  repository_dispatch:

# Only allow one instance running at a time
#concurrency:
#  group: 'service-bus-processing' 
#  cancel-in-progress: false 
# Since we are only ever updating 1-2 values
# at a time, this may not be necessary. We
# would need to consider how to handle concurrent
# transactions (locks?) within the database.

jobs:
  handle_event:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Custom action which emits
      # parsed event as an output
      - name: Receive Message from Azure Service Bus
        id: receive_message
        uses: ./actions/receive-event-from-asb
        with:
          connectionString: ${{ secrets.AZURE_SERVICE_BUS_CONNECTION_STRING }}
          queueName: ${{ vars.AZURE_SERVICE_BUS_QUEUE_NAME }}

      - name: Extract Event Data
        id: extract_event
        run: |
          echo "eventName=${{ steps.receive_message.outputs.eventName }}" >> $GITHUB_OUTPUT
          echo "repositoryName=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.repositoryId')" >> $GITHUB_OUTPUT
          echo "tag=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.tag')" >> $GITHUB_OUTPUT
          echo "baseImageName=$(echo '${{ steps.receive_message.outputs.eventData }}' | jq -r '.repository')" >> $GITHUB_OUTPUT

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check if Image Exists in ACR
        id: check_image
        run: |
          exists=$(az acr repository show-manifests \
            --name <your-acr-name> \
            --repository ${{ steps.extract_event.outputs.repositoryName }} \
            --query "[?tags[0]=='${{ steps.extract_event.outputs.tag }}'].digest" \
            --output tsv)

          if [ -z "$exists" ]; then
            echo "imageExists=false" >> $GITHUB_OUTPUT
          else
            echo "imageExists=true" >> $GITHUB_OUTPUT
          fi

      ### Good up until here ###
      # Review the credentials + action here
      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: https://index.docker.io/v1/ 
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # This looks right but will need validation
      - name: Build and Push Image (if BuildRequested and not exists)
        if: steps.extract_event.outputs.eventName == 'BuildRequested' && steps.check_image.outputs.imageExists == 'false'
        run: |
          docker pull ${{ steps.extract_event.outputs.baseImageName }} 

          docker build -t ${{ steps.extract_event.outputs.baseImageName }}:${{ steps.extract_event.outputs.tag }} \
            --build-arg BASE_IMAGE=${{ steps.extract_event.outputs.baseImageName }} . 

      # Is this the right action?
      - name: Log in to Azure Container Registry
        uses: azure/acr-login@v1

      # Review this
      - name: Tag and Push to ACR
        run: |
          docker tag ${{ steps.extract_event.outputs.repositoryName }}:${{ steps.extract_event.outputs.tag }} <your-acr-name>.azurecr.io/${{ steps.extract_event.outputs.repositoryName }}:${{ steps.extract_event.outputs.tag }}
          docker push <your-acr-name>.azurecr.io/${{ steps.extract_event.outputs.repositoryName }}:${{ steps.extract_event.outputs.tag }}

      # - name: Call Azure Function to Update Database      

      # WIP
      - name: Delete Image
        if: steps.extract_event.outputs.eventName == 'DeleteRequested'
        run: |
          az acr repository delete \
            --name <your-acr-name> \ 
            --image ${{ steps.extract_event.outputs.repositoryName }}:${{ steps.extract_event.outputs.tag }} 